import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  ScrollView,
  Switch,
  Modal,
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { Calendar, LocaleConfig } from 'react-native-calendars';
import { format, isToday, isYesterday, isTomorrow } from 'date-fns';
import { ko } from 'date-fns/locale';
import { useTheme } from '../../store/themeStore';
import { CustomScrollView } from '../../components/CustomScrollView.tsx';
import { anniversaryService, CreateAnniversaryRequest } from '../../services/AnniversaryService';

// üá∞üá∑ date-fnsÎ•º ÏÇ¨Ïö©Ìïú ÌïúÍµ≠Ïñ¥ Î°úÏºÄÏùº ÏÑ§Ï†ï
LocaleConfig.locales['ko'] = {
  monthNames: Array.from({ length: 12 }, (_, i) =>
    format(new Date(2024, i, 1), 'MMMM', { locale: ko })
  ),
  monthNamesShort: Array.from({ length: 12 }, (_, i) =>
    format(new Date(2024, i, 1), 'MMM', { locale: ko })
  ),
  dayNames: Array.from({ length: 7 }, (_, i) =>
    format(new Date(2024, 0, i), 'EEEE', { locale: ko })
  ),
  dayNamesShort: Array.from({ length: 7 }, (_, i) =>
    format(new Date(2024, 0, i), 'EEE', { locale: ko })
  ),
  today: 'Ïò§Îäò'
};
LocaleConfig.defaultLocale = 'ko';

// üé® ÌÖåÎßà ÏãúÏä§ÌÖúÍ≥º Ïó∞ÎèôÎêú Ïä§ÌÉÄÏùº ÏÉùÏÑ± Ìï®Ïàò
const createStyles = (colors: any) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: colors.surface,
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 8,
  },
  backButton: {
    backgroundColor: colors.surfaceVariant,
    borderRadius: 20,
    padding: 8,
  },
  title: {
    fontSize: 20,
    fontWeight: '800',
    color: colors.primary,
  },
  placeholder: {
    width: 40,
  },
  form: {
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '700',
    color: colors.primary,
    marginBottom: 12,
  },
  typeContainer: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 12,
  },
  typeOption: {
    flex: 1,
    borderRadius: 16,
    padding: 16,
    alignItems: 'center',
    borderWidth: 2,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  typeEmoji: {
    fontSize: 28,
    marginBottom: 8,
  },
  typeLabel: {
    fontSize: 14,
    fontWeight: '700',
  },
  exampleContainer: {
    backgroundColor: colors.surfaceVariant,
    borderRadius: 12,
    padding: 12,
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  exampleLabel: {
    fontSize: 14,
    color: '#666',
    fontWeight: '600',
  },
  exampleText: {
    fontSize: 14,
    color: '#999',
    flex: 1,
  },
  titleInput: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: 16,
    fontSize: 16,
    color: '#333',
    borderWidth: 2,
    borderColor: colors.surfaceVariant,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  dateButton: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    borderWidth: 2,
    borderColor: colors.surfaceVariant,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  dateText: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    fontWeight: '600',
  },
  recurringHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  recurringInfo: {
    flex: 1,
  },
  recurringSubtext: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  descriptionInput: {
    backgroundColor: colors.surface,
    borderRadius: 16,
    padding: 16,
    fontSize: 16,
    color: '#333',
    height: 100,
    borderWidth: 2,
    borderColor: colors.surfaceVariant,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  previewContainer: {
    backgroundColor: colors.surface,
    borderRadius: 20,
    padding: 20,
    marginBottom: 24,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 6,
  },
  previewHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  previewTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.primary,
  },
  previewEmoji: {
    fontSize: 24,
  },
  previewCard: {
    backgroundColor: colors.surfaceVariant,
    borderRadius: 16,
    padding: 16,
    borderLeftWidth: 4,
    borderLeftColor: colors.primary,
  },
  previewCardTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#333',
    marginBottom: 8,
  },
  previewCardDate: {
    fontSize: 16,
    color: '#666',
    marginBottom: 4,
  },
  previewCardRecurring: {
    fontSize: 14,
    color: colors.primary,
    fontWeight: '600',
  },
  saveButton: {
    backgroundColor: colors.primary,
    borderRadius: 20,
    padding: 18,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    marginTop: 20,
    shadowColor: colors.primary,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '800',
  },
  saveButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
  },
  // üìÖ Ï∫òÎ¶∞Îçî Î™®Îã¨ Ïä§ÌÉÄÏùº
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  calendarContainer: {
    backgroundColor: colors.surface,
    borderRadius: 20,
    margin: 20,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.25,
    shadowRadius: 20,
    elevation: 15,
  },
  calendarHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  calendarTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.primary,
  },
  closeButton: {
    backgroundColor: colors.surfaceVariant,
    borderRadius: 16,
    padding: 8,
  },
  calendarButtons: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 20,
  },
  calendarButton: {
    flex: 1,
    padding: 14,
    borderRadius: 12,
    alignItems: 'center',
  },
  cancelButton: {
    backgroundColor: colors.surfaceVariant,
  },
  confirmButton: {
    backgroundColor: colors.primary,
  },
  calendarButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  cancelButtonText: {
    color: '#666',
  },
  confirmButtonText: {
    color: '#fff',
  },
});

export function AnniversaryAddScreen({ navigation }: any) {
  const colors = useTheme();
  const [title, setTitle] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [tempSelectedDate, setTempSelectedDate] = useState(new Date()); // Ï∫òÎ¶∞ÎçîÏóêÏÑú ÏûÑÏãúÎ°ú ÏÑ†ÌÉùÎêú ÎÇ†Ïßú
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [type, setType] = useState<'anniversary' | 'birthday' | 'special'>('anniversary');
  const [isRecurring, setIsRecurring] = useState(true);
  const [description, setDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const anniversaryTypes = [
    {
      key: 'anniversary',
      label: 'Í∏∞ÎÖêÏùº',
      emoji: 'üíï',
      color: colors.accent1,
      examples: ['ÏÇ¨Í∑Ñ ÎÇ†', 'Í≤∞Ìòº Í∏∞ÎÖêÏùº', 'Ï≤´ ÎßåÎÇ®'],
      apiType: 'ANNIVERSARY' as const,
    },
    {
      key: 'birthday',
      label: 'ÏÉùÏùº',
      emoji: 'üéÇ',
      color: colors.accent2,
      examples: ['ÎÇ¥ ÏÉùÏùº', 'ÏÉÅÎåÄÎ∞© ÏÉùÏùº', 'Í∞ÄÏ°± ÏÉùÏùº'],
      apiType: 'BIRTHDAY' as const,
    },
    {
      key: 'special',
      label: 'ÌäπÎ≥ÑÌïú ÎÇ†',
      emoji: 'üéâ',
      color: colors.secondary,
      examples: ['ÌÅ¨Î¶¨Ïä§ÎßàÏä§', 'Î∞úÎ†åÌÉÄÏù∏Îç∞Ïù¥', 'ÌôîÏù¥Ìä∏Îç∞Ïù¥'],
      apiType: 'CUSTOM' as const,
    },
  ] as const;

  const handleSave = async () => {
    if (!title.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Í∏∞ÎÖêÏùº Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);

    try {
      const selectedTypeInfo = anniversaryTypes.find(t => t.key === type)!;

      const anniversaryData: CreateAnniversaryRequest = {
        type: selectedTypeInfo.apiType,
        title: title.trim(),
        date: format(selectedDate, 'yyyy-MM-dd'),
        isContinue: isRecurring ? 1 : 0,
        isPrivate: 0, // Í≥†Ï†ïÍ∞í
        description: description.trim() || undefined,
      };

      console.log('Sending anniversary data:', anniversaryData);

      const response = await anniversaryService.createAnniversary(anniversaryData);

      if (response.success) {
        Alert.alert(
          'ÏôÑÎ£å! üéâ',
          'ÏÉàÎ°úÏö¥ Í∏∞ÎÖêÏùºÏù¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.',
          [
            { text: 'ÌôïÏù∏', onPress: () => navigation.goBack() }
          ]
        );
      } else {
        Alert.alert('Îì±Î°ù Ïã§Ìå®', response.message || 'Í∏∞ÎÖêÏùº Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Anniversary save error:', error);
      Alert.alert('Ïò§Î•ò', 'Í∏∞ÎÖêÏùº Îì±Î°ù Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  // üìÖ date-fnsÎ•º ÏÇ¨Ïö©Ìïú ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
  const formatDate = (date: Date) => {
    if (isToday(date)) {
      return 'Ïò§Îäò üìÖ';
    } else if (isYesterday(date)) {
      return 'Ïñ¥Ï†ú üìÖ';
    } else if (isTomorrow(date)) {
      return 'ÎÇ¥Ïùº üìÖ';
    } else {
      return format(date, 'yyyyÎÖÑ MÏõî dÏùº (EEE)', { locale: ko });
    }
  };

  const handleDateSelect = (day: any) => {
    setTempSelectedDate(new Date(day.dateString));
  };

  const confirmDateSelection = () => {
    setSelectedDate(tempSelectedDate);
    setShowDatePicker(false);
  };

  const cancelDateSelection = () => {
    setTempSelectedDate(selectedDate);
    setShowDatePicker(false);
  };

  const goToDatePicker = () => {
    setTempSelectedDate(selectedDate);
    setShowDatePicker(true);
  };

  const getCalendarTheme = () => ({
    backgroundColor: colors.surface,
    calendarBackground: colors.surface,
    textSectionTitleColor: colors.primary,
    selectedDayBackgroundColor: colors.primary,
    selectedDayTextColor: '#fff',
    todayTextColor: colors.accent1,
    dayTextColor: '#333',
    textDisabledColor: '#ccc',
    arrowColor: colors.primary,
    monthTextColor: colors.primary,
    indicatorColor: colors.primary,
    textDayFontFamily: 'System',
    textMonthFontFamily: 'System',
    textDayHeaderFontFamily: 'System',
    textDayFontWeight: '600',
    textMonthFontWeight: '700',
    textDayHeaderFontWeight: '600',
    textDayFontSize: 16,
    textMonthFontSize: 18,
    textDayHeaderFontSize: 14,
  });

  const selectedTypeInfo = anniversaryTypes.find(t => t.key === type)!;
  const styles = createStyles(colors);

  return (
    <SafeAreaView style={styles.container}>
      <CustomScrollView showsVerticalScrollIndicator={false}>
        {/* Ìó§Îçî */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Icon name="arrow-back" size={24} color={colors.primary} />
          </TouchableOpacity>
          <Text style={styles.title}>üéâ Í∏∞ÎÖêÏùº Îì±Î°ù</Text>
          <View style={styles.placeholder} />
        </View>

        {/* Ìèº */}
        <View style={styles.form}>
          {/* Í∏∞ÎÖêÏùº Ïú†Ìòï */}
          <View style={styles.section}>
            <Text style={styles.label}>Í∏∞ÎÖêÏùº Ïú†Ìòï</Text>
            <View style={styles.typeContainer}>
              {anniversaryTypes.map(item => (
                <TouchableOpacity
                  key={item.key}
                  style={[
                    styles.typeOption,
                    {
                      backgroundColor: type === item.key ? item.color : colors.surfaceVariant,
                      borderColor: type === item.key ? item.color : 'transparent',
                    }
                  ]}
                  onPress={() => setType(item.key)}
                  disabled={isLoading}
                >
                  <Text style={styles.typeEmoji}>{item.emoji}</Text>
                  <Text style={[
                    styles.typeLabel,
                    { color: type === item.key ? '#fff' : '#666' }
                  ]}>
                    {item.label}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>

            {/* ÏÑ†ÌÉùÎêú Ïú†ÌòïÏùò ÏòàÏãú */}
            <View style={styles.exampleContainer}>
              <Text style={styles.exampleLabel}>ÏòàÏãú: </Text>
              <Text style={styles.exampleText}>
                {selectedTypeInfo.examples.join(', ')}
              </Text>
            </View>
          </View>

          {/* Í∏∞ÎÖêÏùº Ïù¥Î¶Ñ */}
          <View style={styles.section}>
            <Text style={styles.label}>Í∏∞ÎÖêÏùº Ïù¥Î¶Ñ *</Text>
            <TextInput
              style={styles.titleInput}
              placeholder={`${selectedTypeInfo.emoji} Ïñ¥Îñ§ Í∏∞ÎÖêÏùºÏù∏Í∞ÄÏöî?`}
              placeholderTextColor="#B0B0B0"
              value={title}
              onChangeText={setTitle}
              maxLength={30}
              editable={!isLoading}
            />
          </View>

          {/* ÎÇ†Ïßú ÏÑ†ÌÉù */}
          <View style={styles.section}>
            <Text style={styles.label}>ÎÇ†Ïßú</Text>
            <TouchableOpacity
              style={styles.dateButton}
              onPress={goToDatePicker}
              disabled={isLoading}
            >
              <Icon name="calendar-today" size={20} color={colors.primary} />
              <Text style={styles.dateText}>{formatDate(selectedDate)}</Text>
              <Icon name="chevron-right" size={20} color="#B0B0B0" />
            </TouchableOpacity>
          </View>

          {/* Îß§ÎÖÑ Î∞òÎ≥µ ÏÑ§Ï†ï */}
          <View style={styles.section}>
            <View style={styles.recurringHeader}>
              <View style={styles.recurringInfo}>
                <Text style={styles.label}>Îß§ÎÖÑ Î∞òÎ≥µ</Text>
                <Text style={styles.recurringSubtext}>
                  {isRecurring ? 'Îß§ÎÖÑ Ïù¥ ÎÇ†ÏßúÏóê ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§' : 'Ïù¥Î≤à Ìïú Î≤àÎßå ÏïåÎ¶ºÏùÑ Î∞õÏäµÎãàÎã§'}
                </Text>
              </View>
              <Switch
                value={isRecurring}
                onValueChange={setIsRecurring}
                trackColor={{ false: '#E0E0E0', true: colors.primaryLight }}
                thumbColor={isRecurring ? colors.primary : '#B0B0B0'}
                disabled={isLoading}
              />
            </View>
          </View>

          {/* Î©îÎ™® */}
          <View style={styles.section}>
            <Text style={styles.label}>Î©îÎ™®</Text>
            <TextInput
              style={styles.descriptionInput}
              placeholder="Ïù¥ Í∏∞ÎÖêÏùºÏóê ÎåÄÌïú ÌäπÎ≥ÑÌïú Í∏∞ÏñµÏù¥ÎÇò Î©îÎ™®Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî üí≠"
              placeholderTextColor="#B0B0B0"
              value={description}
              onChangeText={setDescription}
              multiline
              textAlignVertical="top"
              maxLength={200}
              editable={!isLoading}
            />
          </View>

          {/* D-Day ÎØ∏Î¶¨Î≥¥Í∏∞ */}
          <View style={styles.previewContainer}>
            <View style={styles.previewHeader}>
              <Text style={styles.previewTitle}>ÎØ∏Î¶¨Î≥¥Í∏∞</Text>
              <Text style={styles.previewEmoji}>{selectedTypeInfo.emoji}</Text>
            </View>
            <View style={styles.previewCard}>
              <Text style={styles.previewCardTitle}>
                {title || 'Í∏∞ÎÖêÏùº Ïù¥Î¶Ñ'}
              </Text>
              <Text style={styles.previewCardDate}>
                {formatDate(selectedDate)}
              </Text>
              <Text style={styles.previewCardRecurring}>
                {isRecurring ? 'Îß§ÎÖÑ Î∞òÎ≥µ' : 'ÏùºÌöåÏÑ±'}
              </Text>
            </View>
          </View>

          {/* Ï†ÄÏû• Î≤ÑÌäº */}
          <TouchableOpacity
            style={[
              styles.saveButton,
              (isLoading || !title.trim()) && styles.saveButtonDisabled
            ]}
            onPress={handleSave}
            disabled={isLoading || !title.trim()}
          >
            <Icon name="celebration" size={24} color="#fff" />
            <Text style={styles.saveButtonText}>
              {isLoading ? 'Îì±Î°ù Ï§ë...' : 'Í∏∞ÎÖêÏùº Îì±Î°ùÌïòÍ∏∞'}
            </Text>
          </TouchableOpacity>
        </View>
      </CustomScrollView>

      {/* üìÖ ÎÇ†Ïßú ÏÑ†ÌÉù Î™®Îã¨ */}
      <Modal
        visible={showDatePicker}
        transparent={true}
        animationType="fade"
        onRequestClose={cancelDateSelection}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.calendarContainer}>
            <View style={styles.calendarHeader}>
              <Text style={styles.calendarTitle}>üìÖ ÎÇ†Ïßú ÏÑ†ÌÉù</Text>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={cancelDateSelection}
              >
                <Icon name="close" size={20} color={colors.primary} />
              </TouchableOpacity>
            </View>

            <Calendar
              current={format(tempSelectedDate, 'yyyy-MM-dd')}
              onDayPress={handleDateSelect}
              monthFormat={'yyyyÎÖÑ MÏõî'}
              theme={getCalendarTheme()}
              markedDates={{
                [format(tempSelectedDate, 'yyyy-MM-dd')]: {
                  selected: true,
                  selectedColor: colors.primary,
                },
              }}
              style={{
                borderRadius: 12,
              }}
            />

            <View style={styles.calendarButtons}>
              <TouchableOpacity
                style={[styles.calendarButton, styles.cancelButton]}
                onPress={cancelDateSelection}
              >
                <Text style={[styles.calendarButtonText, styles.cancelButtonText]}>
                  Ï∑®ÏÜå
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.calendarButton, styles.confirmButton]}
                onPress={confirmDateSelection}
              >
                <Text style={[styles.calendarButtonText, styles.confirmButtonText]}>
                  ÌôïÏù∏
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}
