import React, { useState, useEffect, useCallback } from 'react';
import { useFocusEffect } from '@react-navigation/native';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Modal,
  Animated,
  SafeAreaView,
} from 'react-native';
import { useTheme } from '../../store/themeStore';
import { useAppStore } from '../../store/appStore';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { format } from 'date-fns';
import { reflectionService, Reflection, CreateReflectionRequest } from '../../services/ReflectionService';

type TabType = 'list' | 'write';

export function ReflectionScreen() {
  const colors = useTheme();
  const { user, couple } = useAppStore();
  const [activeTab, setActiveTab] = useState<TabType>('list');
  const [selectedReflection, setSelectedReflection] = useState<Reflection | null>(null);
  const [isDetailModalVisible, setIsDetailModalVisible] = useState(false);
  const [isApprovalModalVisible, setIsApprovalModalVisible] = useState(false);
  const [isFeedbackModalVisible, setIsFeedbackModalVisible] = useState(false);
  const [pendingApproval, setPendingApproval] = useState<{id: number, approved: boolean} | null>(null);
  const [feedback, setFeedback] = useState('');
  const [approvalAnimValue] = useState(new Animated.Value(0));
  const [stampRotation] = useState(new Animated.Value(0));
  const [stampScale] = useState(new Animated.Value(0));
  const [isLoading, setIsLoading] = useState(false);

  // Î∞òÏÑ±Î¨∏ ÏûëÏÑ± Ìèº ÏÉÅÌÉú
  const [incident, setIncident] = useState('');
  const [reason, setReason] = useState('');
  const [improvement, setImprovement] = useState('');

  // Î∞òÏÑ±Î¨∏ Î™©Î°ù ÏÉÅÌÉú
  const [reflections, setReflections] = useState<Reflection[]>([]);

  // üî• Î∞òÏÑ±Î¨∏ Î™©Î°ù Î°úÎìú
  const loadReflections = useCallback(async () => {
    if (!couple?.id) {
      console.warn('Couple ID not found');
      return;
    }

    try {
      setIsLoading(true);
      const response = await reflectionService.getReflections();

      if (response.success && response.data?.length > 0) {
        setReflections(response.data);
      }

    } catch (error) {
      console.error('Error loading reflections:', error);
    } finally {
      setIsLoading(false);
    }
  }, [couple?.id]);

  useFocusEffect(
    useCallback(() => {
      console.log('üîÑ ReflectionScreen focused - Loading reflections...');
      loadReflections();
    }, [loadReflections])
  );

  // üîÑ ÌÉ≠ Î≥ÄÍ≤Ω ÏãúÏóêÎèÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (list ÌÉ≠ÏúºÎ°ú Ï†ÑÌôòÌï† Îïå)
  useEffect(() => {
    if (activeTab === 'list') {
      console.log('üîÑ Switched to list tab - Refreshing reflections...');
      loadReflections();
    }
  }, [activeTab, loadReflections]);

  // Î∞òÏÑ±Î¨∏ Ï†úÏ∂ú
  const handleSubmit = async () => {
    if (!incident.trim() || !reason.trim() || !improvement.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Î™®Îì† Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    if (!user?.id || !couple?.id) {
      Alert.alert('Ïò§Î•ò', 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    Alert.alert(
      'Î∞òÏÑ±Î¨∏ Ï†úÏ∂ú',
      'Î∞òÏÑ±Î¨∏ÏùÑ Ï†úÏ∂úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Ï†úÏ∂ú',
          onPress: async () => {
            try {
              setIsLoading(true);

              const reflectionData: CreateReflectionRequest = {
                couple_id: couple.id,
                author_user_id: user.id,
                approver_user_id: couple.users.find(data => data.id !== user.id)?.id,
                incident: incident.trim(),
                reason: reason.trim(),
                improvement: improvement.trim(),
              };

              const response = await reflectionService.createReflection(reflectionData);

              if (response.success) {
                Alert.alert('ÏôÑÎ£å', 'Î∞òÏÑ±Î¨∏Ïù¥ Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§.');

                // Ìèº Ï¥àÍ∏∞Ìôî
                setIncident('');
                setReason('');
                setImprovement('');

                // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
                await loadReflections();

                // Î™©Î°ù ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
                setActiveTab('list');
              } else {
                Alert.alert('Ïò§Î•ò', response.message || 'Î∞òÏÑ±Î¨∏ Ï†úÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
              }
            } catch (error) {
              console.error('Error submitting reflection:', error);
              Alert.alert('Ïò§Î•ò', 'Î∞òÏÑ±Î¨∏ Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
            } finally {
              setIsLoading(false);
            }
          },
        },
      ]
    );
  };

  // Í≤∞Ïû¨ Ïï†ÎãàÎ©îÏù¥ÏÖò Ïã§Ìñâ
  const startApprovalAnimation = () => {
    stampRotation.setValue(0);
    stampScale.setValue(0);
    approvalAnimValue.setValue(0);

    Animated.parallel([
      Animated.timing(stampRotation, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.sequence([
        Animated.timing(stampScale, {
          toValue: 1.2,
          duration: 300,
          useNativeDriver: true,
        }),
        Animated.timing(stampScale, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }),
      ]),
      Animated.timing(approvalAnimValue, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
    ]).start();
  };

  // Í≤∞Ïû¨ Ï≤òÎ¶¨
  const handleApproval = async (reflectionId: number, approved: boolean, feedbackText?: string) => {
    if (!user?.id) {
      Alert.alert('Ïò§Î•ò', 'ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    if (isDetailModalVisible) {
      setIsDetailModalVisible(false);
    }

    setPendingApproval({ id: reflectionId, approved });
    setIsApprovalModalVisible(true);

    setTimeout(() => {
      startApprovalAnimation();
    }, 100);

    try {
      const approvalData = {
        status: approved ? 'APPROVED' as const : 'REJECTED' as const,
        ...(feedbackText && { feedback: feedbackText }),
      };

      const response = await reflectionService.approveReflection(reflectionId, approvalData);

      setTimeout(async () => {
        setIsApprovalModalVisible(false);
        setPendingApproval(null);

        if (response.success) {
          await loadReflections();

          setTimeout(() => {
            Alert.alert(
              'Í≤∞Ïû¨ ÏôÑÎ£å! ‚úÖ',
              approved
                ? 'Î∞òÏÑ±Î¨∏Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§.\nÏÉÅÎåÄÎ∞©ÏóêÍ≤å ÏïåÎ¶ºÏù¥ Ï†ÑÏÜ°Îê©ÎãàÎã§.'
                : 'Î∞òÏÑ±Î¨∏Ïù¥ Î∞òÎ†§ÎêòÏóàÏäµÎãàÎã§.\nÏÉÅÎåÄÎ∞©ÏóêÍ≤å ÏïåÎ¶ºÏù¥ Ï†ÑÏÜ°Îê©ÎãàÎã§.',
              [{ text: 'ÌôïÏù∏' }]
            );
          }, 200);
        } else {
          Alert.alert('Ïò§Î•ò', response.message || 'Í≤∞Ïû¨ Ï≤òÎ¶¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
      }, 2200);
    } catch (error) {
      console.error('Error approving reflection:', error);

      setTimeout(() => {
        setIsApprovalModalVisible(false);
        setPendingApproval(null);
        Alert.alert('Ïò§Î•ò', 'Í≤∞Ïû¨ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }, 2200);
    }
  };

  // ÌîºÎìúÎ∞± Ï†úÏ∂ú Ï≤òÎ¶¨
  const handleFeedbackSubmit = () => {
    if (!feedback.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Î∞òÎ†§ ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const reflection = reflections.find(r => r.id === pendingApproval?.id);
    if (!reflection) {
      Alert.alert('Ïò§Î•ò', 'Î∞òÏÑ±Î¨∏ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    setIsFeedbackModalVisible(false);
    handleApproval(reflection.id, false, feedback);
    setFeedback('');
  };

  // Í≤∞Ïû¨ ÌôïÏù∏
  const confirmApproval = (reflectionId: number, approved: boolean) => {
    const reflection = reflections.find(r => r.id === reflectionId);

    if (approved) {
      Alert.alert(
        `Î∞òÏÑ±Î¨∏ ÏäπÏù∏`,
        `"${reflection?.incident}"Ïóê ÎåÄÌïú Î∞òÏÑ±Î¨∏ÏùÑ ÏäπÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
        [
          { text: 'Ï∑®ÏÜå', style: 'cancel' },
          {
            text: 'ÏäπÏù∏',
            style: 'default',
            onPress: () => handleApproval(reflectionId, approved)
          }
        ]
      );
    } else {
      setPendingApproval({ id: reflectionId, approved: false });
      setIsFeedbackModalVisible(true);
    }
  };

  // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
  const getCurrentDate = () => {
    const now = new Date();
    return `${now.getFullYear()}ÎÖÑ ${now.getMonth() + 1}Ïõî ${now.getDate()}Ïùº`;
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'PENDING': return 'Í≤∞Ïû¨ ÎåÄÍ∏∞';
      case 'APPROVED': return 'ÏäπÏù∏Îê®';
      case 'REJECTED': return 'Î∞òÎ†§Îê®';
      default: return 'Ïïå Ïàò ÏóÜÏùå';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PENDING': return '#F59E0B';
      case 'APPROVED': return '#10B981';
      case 'REJECTED': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return format(date, 'yyyyÎÖÑ MMÏõî ddÏùº HH:mm');
  };

  const openReflectionDetail = (reflection: Reflection) => {
    setSelectedReflection(reflection);
    setIsDetailModalVisible(true);
  };

  const canApprove = (reflection: Reflection) => {
    return reflection.status === 'PENDING' && reflection.author_user_id !== user?.id;
  };

  const getAuthorName = (reflection: Reflection) => {
    return reflection.author_user_id === user?.id ? user?.name || 'ÎÇò' : 'ÏÉÅÎåÄÎ∞©Îãò';
  };

  const getApproverName = (reflection: Reflection) => {
    if (!reflection.approver_user_id) return '';
    return reflection.approver_user_id === user?.id ? user?.name || 'ÎÇò' : 'ÏÉÅÎåÄÎ∞©Îãò';
  };

  // ÌîºÎìúÎ∞± ÏûÖÎ†• Î™®Îã¨
  const renderFeedbackModal = () => (
    <Modal
      visible={isFeedbackModalVisible}
      transparent
      animationType="slide"
      onRequestClose={() => setIsFeedbackModalVisible(false)}
    >
      <View style={styles.feedbackOverlay}>
        <View style={[styles.feedbackContainer, { backgroundColor: colors.surface }]}>
          <View style={styles.feedbackHeader}>
            <Text style={[styles.feedbackTitle, { color: colors.text }]}>
              Î∞òÎ†§ ÏÇ¨Ïú† ÏûÖÎ†•
            </Text>
            <TouchableOpacity
              style={styles.feedbackCloseButton}
              onPress={() => setIsFeedbackModalVisible(false)}
            >
              <Icon name="close" size={24} color={colors.text} />
            </TouchableOpacity>
          </View>

          <Text style={[styles.feedbackDescription, { color: colors.textSecondary }]}>
            Î∞òÏÑ±Î¨∏ÏùÑ Î∞òÎ†§ÌïòÎäî Ïù¥Ïú†Î•º ÏÉÅÏÑ∏Ìûà ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
            ÏûëÏÑ±ÏûêÍ∞Ä Ïù¥Î•º Ï∞∏Í≥†ÌïòÏó¨ Îçî ÎÇòÏùÄ Î∞òÏÑ±Î¨∏ÏùÑ ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.
          </Text>

          <TextInput
            style={[
              styles.feedbackTextInput,
              {
                backgroundColor: colors.background,
                borderColor: colors.border,
                color: colors.text,
              },
            ]}
            value={feedback}
            onChangeText={setFeedback}
            placeholder="Î∞òÎ†§ ÏÇ¨Ïú†Î•º Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
            placeholderTextColor={colors.textSecondary}
            multiline
            numberOfLines={6}
            textAlignVertical="top"
          />

          <View style={styles.feedbackButtons}>
            <TouchableOpacity
              style={[styles.feedbackButton, styles.feedbackCancelButton]}
              onPress={() => setIsFeedbackModalVisible(false)}
            >
              <Text style={styles.feedbackCancelButtonText}>Ï∑®ÏÜå</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.feedbackButton, styles.feedbackSubmitButton]}
              onPress={handleFeedbackSubmit}
            >
              <Icon name="send" size={16} color="#fff" />
              <Text style={styles.feedbackSubmitButtonText}>Î∞òÎ†§ÌïòÍ∏∞</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );

  const renderReflectionList = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <View style={[styles.summaryCard, { backgroundColor: colors.surface }]}>
        <View style={styles.summaryRow}>
          <View style={styles.summaryItem}>
            <Text style={[styles.summaryNumber, { color: '#F59E0B' }]}>
              {reflections.filter(r => r.status === 'PENDING').length}
            </Text>
            <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
              Í≤∞Ïû¨ ÎåÄÍ∏∞
            </Text>
          </View>
          <View style={styles.summaryItem}>
            <Text style={[styles.summaryNumber, { color: '#10B981' }]}>
              {reflections.filter(r => r.status === 'APPROVED').length}
            </Text>
            <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
              ÏäπÏù∏Îê®
            </Text>
          </View>
          <View style={styles.summaryItem}>
            <Text style={[styles.summaryNumber, { color: '#EF4444' }]}>
              {reflections.filter(r => r.status === 'REJECTED').length}
            </Text>
            <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
              Î∞òÎ†§Îê®
            </Text>
          </View>
        </View>
      </View>

      {reflections.length === 0 ? (
        <View style={[styles.emptyState, { backgroundColor: colors.surface }]}>
          <Icon name="assignment" size={64} color={colors.textSecondary} />
          <Text style={[styles.emptyText, { color: colors.textSecondary }]}>
            {isLoading ? 'Î∞òÏÑ±Î¨∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...' : 'ÏûëÏÑ±Îêú Î∞òÏÑ±Î¨∏Ïù¥ ÏóÜÏäµÎãàÎã§'}
          </Text>
          {!isLoading && (
            <TouchableOpacity
              style={[styles.writeButton, { backgroundColor: colors.primary }]}
              onPress={() => setActiveTab('write')}
            >
              <Icon name="edit" size={20} color="#fff" />
              <Text style={styles.writeButtonText}>Î∞òÏÑ±Î¨∏ ÏûëÏÑ±ÌïòÍ∏∞</Text>
            </TouchableOpacity>
          )}
        </View>
      ) : (
        <View style={styles.reflectionList}>
          {reflections.map((reflection) => (
            <TouchableOpacity
              key={reflection.id}
              style={[styles.reflectionCard, { backgroundColor: colors.surface }]}
              onPress={() => openReflectionDetail(reflection)}
            >
              <View style={styles.reflectionHeader}>
                <Text style={[styles.reflectionTitle, { color: colors.text }]} numberOfLines={2}>
                  {reflection.incident}
                </Text>
                <View style={[
                  styles.statusBadge,
                  { backgroundColor: `${getStatusColor(reflection.status)}20` }
                ]}>
                  <Text style={[
                    styles.statusText,
                    { color: getStatusColor(reflection.status) }
                  ]}>
                    {getStatusText(reflection.status)}
                  </Text>
                </View>
              </View>

              <View style={styles.reflectionInfo}>
                <Text style={[styles.reflectionDate, { color: colors.textSecondary }]}>
                  ÏûëÏÑ±Ïûê: {getAuthorName(reflection)} ‚Ä¢ {formatDate(reflection.created_at)}
                </Text>

                {canApprove(reflection) && (
                  <View style={styles.approvalButtons}>
                    <TouchableOpacity
                      style={[styles.approvalButton, styles.approveButton]}
                      onPress={(e) => {
                        e.stopPropagation();
                        confirmApproval(reflection.id, true);
                      }}
                    >
                      <Icon name="check" size={16} color="#fff" />
                      <Text style={styles.approvalButtonText}>ÏäπÏù∏</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={[styles.approvalButton, styles.rejectButton]}
                      onPress={(e) => {
                        e.stopPropagation();
                        confirmApproval(reflection.id, false);
                      }}
                    >
                      <Icon name="close" size={16} color="#fff" />
                      <Text style={styles.approvalButtonText}>Î∞òÎ†§</Text>
                    </TouchableOpacity>
                  </View>
                )}
              </View>

              {/* ÏäπÏù∏/Î∞òÎ†§ Ï†ïÎ≥¥ Î∞è ÌîºÎìúÎ∞± ÌëúÏãú */}
              {reflection.status === 'APPROVED' && reflection.approved_at && (
                <View style={styles.approvalInfoContainer}>
                  <Text style={[styles.approvalInfoText, { color: '#10B981' }]}>
                    ‚úÖ {getApproverName(reflection)}ÎãòÏù¥ {formatDate(reflection.approved_at)}Ïóê ÏäπÏù∏
                  </Text>
                </View>
              )}

              {reflection.status === 'REJECTED' && (
                <View style={styles.rejectionContainer}>
                  <Text style={[styles.rejectionText, { color: '#EF4444' }]}>
                    ‚ùå {getApproverName(reflection)}ÎãòÏù¥ {reflection.approved_at ? formatDate(reflection.approved_at) : ''}Ïóê Î∞òÎ†§
                  </Text>
                  {reflection.feedback && (
                    <View style={styles.feedbackPreviewContainer}>
                      <Text style={[styles.feedbackPreviewLabel, { color: '#EF4444' }]}>
                        Î∞òÎ†§ ÏÇ¨Ïú†:
                      </Text>
                      <Text style={[styles.feedbackPreviewText, { color: colors.text }]} numberOfLines={2}>
                        {reflection.feedback}
                      </Text>
                    </View>
                  )}
                </View>
              )}
            </TouchableOpacity>
          ))}
        </View>
      )}

      <View style={{ height: 100 }} />
    </ScrollView>
  );

  const renderWriteForm = () => (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      <View style={[styles.approvalSection, { backgroundColor: colors.surface }]}>
        <View style={styles.approvalHeader}>
          <View style={styles.approvalBox}>
            <Text style={[styles.approvalLabel, { color: colors.textSecondary }]}>
              Í≤∞Ïû¨Ïûê
            </Text>
            <View style={styles.approvalRightSection}>
              <View style={[styles.approverInfo, { borderColor: colors.border }]}>
                <Icon name="person" size={20} color={colors.textSecondary} />
                <Text style={[styles.approverName, { color: colors.text }]}>
                  ÏÉÅÎåÄÎ∞©Îãò
                </Text>
              </View>
              <View style={[styles.stampArea, { borderColor: colors.border }]}>
                <Text style={[styles.stampText, { color: colors.textSecondary }]}>
                  Í≤∞Ïû¨
                </Text>
              </View>
            </View>
          </View>
        </View>

        <View style={styles.infoSection}>
          <View style={styles.infoRow}>
            <Text style={[styles.infoLabel, { color: colors.textSecondary }]}>
              ÏûëÏÑ±Ïûê:
            </Text>
            <Text style={[styles.infoValue, { color: colors.text }]}>
              {user?.name || 'ÏÇ¨Ïö©Ïûê'}
            </Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={[styles.infoLabel, { color: colors.textSecondary }]}>
              ÏûëÏÑ±Ïùº:
            </Text>
            <Text style={[styles.infoValue, { color: colors.text }]}>
              {getCurrentDate()}
            </Text>
          </View>
        </View>
      </View>

      <View style={[styles.formSection, { backgroundColor: colors.surface }]}>
        <View style={styles.formGroup}>
          <Text style={[styles.formLabel, { color: colors.text }]}>
            1. ÏûòÎ™ªÌïú Ïùº *
          </Text>
          <TextInput
            style={[
              styles.textInput,
              {
                backgroundColor: colors.background,
                borderColor: colors.border,
                color: colors.text,
              },
            ]}
            value={incident}
            onChangeText={setIncident}
            placeholder="Ïñ¥Îñ§ ÏûòÎ™ªÏùÑ ÌñàÎäîÏßÄ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
            placeholderTextColor={colors.textSecondary}
            multiline
            numberOfLines={4}
            editable={!isLoading}
          />
        </View>

        <View style={styles.formGroup}>
          <Text style={[styles.formLabel, { color: colors.text }]}>
            2. ÏûòÎ™ªÌïú Ïù¥Ïú† *
          </Text>
          <TextInput
            style={[
              styles.textInput,
              {
                backgroundColor: colors.background,
                borderColor: colors.border,
                color: colors.text,
              },
            ]}
            value={reason}
            onChangeText={setReason}
            placeholder="Ïôú Í∑∏Îü∞ ÌñâÎèôÏùÑ ÌñàÎäîÏßÄ Ïù¥Ïú†Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
            placeholderTextColor={colors.textSecondary}
            multiline
            numberOfLines={4}
            editable={!isLoading}
          />
        </View>

        <View style={styles.formGroup}>
          <Text style={[styles.formLabel, { color: colors.text }]}>
            3. ÏïûÏúºÎ°úÏùò Í∞úÏÑ† Î∞©Ïïà *
          </Text>
          <TextInput
            style={[
              styles.textInput,
              {
                backgroundColor: colors.background,
                borderColor: colors.border,
                color: colors.text,
              },
            ]}
            value={improvement}
            onChangeText={setImprovement}
            placeholder="Í∞ôÏùÄ Ïã§ÏàòÎ•º Î∞òÎ≥µÌïòÏßÄ ÏïäÍ∏∞ ÏúÑÌïú Íµ¨Ï≤¥Ï†ÅÏù∏ Í∞úÏÑ† Î∞©ÏïàÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
            placeholderTextColor={colors.textSecondary}
            multiline
            numberOfLines={5}
            editable={!isLoading}
          />
        </View>
      </View>

      <View style={[styles.signatureSection, { backgroundColor: colors.surface }]}>
        <View style={styles.signatureRow}>
          <Text style={[styles.signatureLabel, { color: colors.textSecondary }]}>
            ÏûëÏÑ±Ïûê:
          </Text>
          <View style={[styles.signatureBox, { borderColor: colors.border }]}>
            <Text style={[styles.signatureName, { color: colors.text }]}>
              {user?.name || 'ÏÇ¨Ïö©Ïûê'}
            </Text>
            <Text style={[styles.signatureStamp, { color: colors.primary }]}>
              (Ïù∏)
            </Text>
          </View>
        </View>
      </View>

      <TouchableOpacity
        style={[
          styles.submitButton,
          {
            backgroundColor: isLoading ? colors.textSecondary : colors.primary,
            opacity: isLoading ? 0.6 : 1
          }
        ]}
        onPress={handleSubmit}
        disabled={isLoading}
      >
        <Icon name="send" size={20} color="#fff" />
        <Text style={styles.submitButtonText}>
          {isLoading ? 'Ï†úÏ∂ú Ï§ë...' : 'Î∞òÏÑ±Î¨∏ Ï†úÏ∂ú'}
        </Text>
      </TouchableOpacity>

      <View style={{ height: 100 }} />
    </ScrollView>
  );

  // Í≤∞Ïû¨ Ïï†ÎãàÎ©îÏù¥ÏÖò Î™®Îã¨
  const renderApprovalAnimationModal = () => (
    <Modal
      visible={isApprovalModalVisible}
      transparent
      animationType="fade"
    >
      <View style={styles.animationOverlay}>
        <View style={styles.animationContainer}>
          <Animated.View
            style={[
              styles.stampContainer,
              {
                transform: [
                  {
                    rotate: stampRotation.interpolate({
                      inputRange: [0, 1],
                      outputRange: ['0deg', '360deg'],
                    }),
                  },
                  {
                    scale: stampScale,
                  },
                ],
                opacity: approvalAnimValue,
              },
            ]}
          >
            <View style={[
              styles.animatedStamp,
              {
                backgroundColor: pendingApproval?.approved ? '#10B981' : '#EF4444'
              }
            ]}>
              <Text style={styles.animatedStampText}>
                {pendingApproval?.approved ? 'ÏäπÏù∏' : 'Î∞òÎ†§'}
              </Text>
            </View>
          </Animated.View>

          <Animated.Text
            style={[
              styles.animationText,
              {
                opacity: approvalAnimValue,
                transform: [
                  {
                    translateY: approvalAnimValue.interpolate({
                      inputRange: [0, 1],
                      outputRange: [30, 0],
                    }),
                  },
                ],
              },
            ]}
          >
            Í≤∞Ïû¨ ÏôÑÎ£å!
          </Animated.Text>
        </View>
      </View>
    </Modal>
  );

  const renderDetailModal = () => (
    <Modal
      visible={isDetailModalVisible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={() => setIsDetailModalVisible(false)}
    >
      <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={[styles.modalHeader, { backgroundColor: colors.surface }]}>
          <TouchableOpacity
            style={styles.closeButton}
            onPress={() => setIsDetailModalVisible(false)}
          >
            <Icon name="close" size={24} color={colors.text} />
          </TouchableOpacity>
          <Text style={[styles.modalTitle, { color: colors.text }]}>
            Î∞òÏÑ±Î¨∏ ÏÉÅÏÑ∏Î≥¥Í∏∞
          </Text>
          <View style={styles.placeholder} />
        </View>

        {selectedReflection && (
          <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>
            <View style={[styles.detailCard, { backgroundColor: colors.surface }]}>
              <View style={styles.detailHeader}>
                <Text style={[styles.detailTitle, { color: colors.text }]}>
                  Î∞òÏÑ±Î¨∏
                </Text>
                <View style={[
                  styles.statusBadge,
                  { backgroundColor: `${getStatusColor(selectedReflection.status)}20` }
                ]}>
                  <Text style={[
                    styles.statusText,
                    { color: getStatusColor(selectedReflection.status) }
                  ]}>
                    {getStatusText(selectedReflection.status)}
                  </Text>
                </View>
              </View>

              <View style={styles.detailInfo}>
                <Text style={[styles.detailLabel, { color: colors.textSecondary }]}>
                  ÏûëÏÑ±Ïûê: {getAuthorName(selectedReflection)}
                </Text>
                <Text style={[styles.detailLabel, { color: colors.textSecondary }]}>
                  ÏûëÏÑ±Ïùº: {formatDate(selectedReflection.created_at)}
                </Text>

                {selectedReflection.approved_at && (
                  <Text style={[styles.detailLabel, { color: colors.textSecondary }]}>
                    Í≤∞Ïû¨Ïùº: {formatDate(selectedReflection.approved_at)}
                  </Text>
                )}
              </View>

              <View style={styles.detailContent}>
                <View style={styles.detailSection}>
                  <Text style={[styles.detailSectionTitle, { color: colors.text }]}>
                    1. ÏûòÎ™ªÌïú Ïùº
                  </Text>
                  <Text style={[styles.detailSectionContent, { color: colors.text }]}>
                    {selectedReflection.incident}
                  </Text>
                </View>

                <View style={styles.detailSection}>
                  <Text style={[styles.detailSectionTitle, { color: colors.text }]}>
                    2. ÏûòÎ™ªÌïú Ïù¥Ïú†
                  </Text>
                  <Text style={[styles.detailSectionContent, { color: colors.text }]}>
                    {selectedReflection.reason}
                  </Text>
                </View>

                <View style={styles.detailSection}>
                  <Text style={[styles.detailSectionTitle, { color: colors.text }]}>
                    3. ÏïûÏúºÎ°úÏùò Í∞úÏÑ† Î∞©Ïïà
                  </Text>
                  <Text style={[styles.detailSectionContent, { color: colors.text }]}>
                    {selectedReflection.improvement}
                  </Text>
                </View>

                {/* Î∞òÎ†§ ÌîºÎìúÎ∞± ÌëúÏãú - Í∞úÏÑ†Îêú UI */}
                {selectedReflection.status === 'REJECTED' && selectedReflection.feedback && (
                  <View style={styles.detailFeedbackSection}>
                    <View style={styles.detailFeedbackHeader}>
                      <Icon name="feedback" size={20} color="#EF4444" />
                      <Text style={[styles.detailFeedbackTitle, { color: '#EF4444' }]}>
                        Î∞òÎ†§ ÏÇ¨Ïú†
                      </Text>
                    </View>
                    <View style={styles.detailFeedbackContent}>
                      <Text style={[styles.detailFeedbackText, { color: colors.text }]}>
                        {selectedReflection.feedback}
                      </Text>
                    </View>
                  </View>
                )}
              </View>

              {canApprove(selectedReflection) && (
                <View style={styles.detailApprovalButtons}>
                  <TouchableOpacity
                    style={[styles.detailApprovalButton, styles.approveButton]}
                    onPress={() => confirmApproval(selectedReflection.id, true)}
                  >
                    <Icon name="check" size={20} color="#fff" />
                    <Text style={styles.detailApprovalButtonText}>ÏäπÏù∏</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[styles.detailApprovalButton, styles.rejectButton]}
                    onPress={() => confirmApproval(selectedReflection.id, false)}
                  >
                    <Icon name="close" size={20} color="#fff" />
                    <Text style={styles.detailApprovalButtonText}>Î∞òÎ†§</Text>
                  </TouchableOpacity>
                </View>
              )}
            </View>
          </ScrollView>
        )}
      </SafeAreaView>
    </Modal>
  );

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: colors.background }]}>
      <View style={[styles.header, { backgroundColor: colors.surface }]}>
        <Text style={[styles.headerTitle, { color: colors.text }]}>
          Î∞òÏÑ±Î¨∏
        </Text>
      </View>

      <View style={[styles.tabContainer, { backgroundColor: colors.surface }]}>
        <TouchableOpacity
          style={[
            styles.tab,
            activeTab === 'list' && { backgroundColor: colors.primary }
          ]}
          onPress={() => setActiveTab('list')}
        >
          <Icon
            name="list"
            size={20}
            color={activeTab === 'list' ? '#fff' : colors.textSecondary}
          />
          <Text style={[
            styles.tabText,
            { color: activeTab === 'list' ? '#fff' : colors.textSecondary }
          ]}>
            Î™©Î°ù
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.tab,
            activeTab === 'write' && { backgroundColor: colors.primary }
          ]}
          onPress={() => setActiveTab('write')}
        >
          <Icon
            name="edit"
            size={20}
            color={activeTab === 'write' ? '#fff' : colors.textSecondary}
          />
          <Text style={[
            styles.tabText,
            { color: activeTab === 'write' ? '#fff' : colors.textSecondary }
          ]}>
            ÏûëÏÑ±
          </Text>
        </TouchableOpacity>
      </View>

      {activeTab === 'list' ? renderReflectionList() : renderWriteForm()}

      {renderFeedbackModal()}
      {renderApprovalAnimationModal()}
      {renderDetailModal()}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  tabContainer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 12,
    marginHorizontal: 4,
    gap: 8,
  },
  tabText: {
    fontSize: 16,
    fontWeight: '600',
  },
  content: {
    flex: 1,
    padding: 20,
  },

  // üîÑ ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
  refreshContainer: {
    marginBottom: 16,
    borderRadius: 12,
    padding: 16,
  },
  refreshButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderRadius: 8,
    gap: 8,
  },
  refreshButtonText: {
    fontSize: 14,
    fontWeight: '600',
  },

  summaryCard: {
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  summaryLabel: {
    fontSize: 12,
    textAlign: 'center',
  },
  emptyState: {
    padding: 40,
    alignItems: 'center',
    borderRadius: 12,
    marginTop: 20,
  },
  emptyText: {
    fontSize: 16,
    marginTop: 16,
    marginBottom: 24,
    textAlign: 'center',
  },
  writeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    gap: 8,
  },
  writeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  reflectionList: {
    gap: 16,
  },
  reflectionCard: {
    borderRadius: 12,
    padding: 16,
  },
  reflectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  reflectionTitle: {
    flex: 1,
    fontSize: 16,
    fontWeight: '600',
    marginRight: 12,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  reflectionInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  reflectionDate: {
    fontSize: 12,
    flex: 1,
  },
  approvalButtons: {
    flexDirection: 'row',
    gap: 8,
  },
  approvalButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    gap: 4,
  },
  approveButton: {
    backgroundColor: '#10B981',
  },
  rejectButton: {
    backgroundColor: '#EF4444',
  },
  approvalButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  approvalInfoContainer: {
    marginTop: 8,
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0,0,0,0.1)',
  },
  approvalInfoText: {
    fontSize: 12,
    fontWeight: '500',
  },
  rejectionContainer: {
    marginTop: 8,
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0,0,0,0.1)',
  },
  rejectionText: {
    fontSize: 12,
    fontWeight: '500',
    marginBottom: 8,
  },
  feedbackPreviewContainer: {
    backgroundColor: 'rgba(239, 68, 68, 0.1)',
    padding: 12,
    borderRadius: 8,
  },
  feedbackPreviewLabel: {
    fontSize: 12,
    fontWeight: '600',
    marginBottom: 4,
  },
  feedbackPreviewText: {
    fontSize: 12,
    lineHeight: 16,
  },

  // ÏûëÏÑ± Ìèº Ïä§ÌÉÄÏùºÎì§
  approvalSection: {
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  approvalHeader: {
    marginBottom: 16,
  },
  approvalBox: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  approvalLabel: {
    fontSize: 16,
    fontWeight: '600',
  },
  approvalRightSection: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  approverInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderWidth: 1,
    borderRadius: 8,
    gap: 8,
  },
  approverName: {
    fontSize: 14,
    fontWeight: '500',
  },
  stampArea: {
    width: 60,
    height: 40,
    borderWidth: 2,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  stampText: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  infoSection: {
    gap: 8,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  infoLabel: {
    fontSize: 14,
    width: 60,
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '500',
  },
  formSection: {
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  formGroup: {
    marginBottom: 24,
  },
  formLabel: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  textInput: {
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    lineHeight: 20,
    textAlignVertical: 'top',
  },
  signatureSection: {
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
  },
  signatureRow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  signatureLabel: {
    fontSize: 14,
  },
  signatureBox: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderWidth: 1,
    borderRadius: 8,
    gap: 8,
  },
  signatureName: {
    fontSize: 14,
    fontWeight: '500',
  },
  signatureStamp: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  submitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
  },
  submitButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },

  // ÌîºÎìúÎ∞± Î™®Îã¨ Ïä§ÌÉÄÏùºÎì§
  feedbackOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  feedbackContainer: {
    width: '100%',
    maxWidth: 400,
    borderRadius: 16,
    padding: 24,
  },
  feedbackHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  feedbackTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  feedbackCloseButton: {
    padding: 4,
  },
  feedbackDescription: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 20,
  },
  feedbackTextInput: {
    borderWidth: 1,
    borderRadius: 12,
    padding: 16,
    fontSize: 14,
    lineHeight: 20,
    minHeight: 120,
    marginBottom: 24,
  },
  feedbackButtons: {
    flexDirection: 'row',
    gap: 12,
  },
  feedbackButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
    gap: 8,
  },
  feedbackCancelButton: {
    backgroundColor: '#6B7280',
  },
  feedbackSubmitButton: {
    backgroundColor: '#EF4444',
  },
  feedbackCancelButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  feedbackSubmitButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },

  // Ïï†ÎãàÎ©îÏù¥ÏÖò Î™®Îã¨ Ïä§ÌÉÄÏùºÎì§
  animationOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  animationContainer: {
    alignItems: 'center',
  },
  stampContainer: {
    marginBottom: 24,
  },
  animatedStamp: {
    width: 100,
    height: 100,
    borderRadius: 50,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 4.65,
    elevation: 8,
  },
  animatedStampText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  animationText: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
  },

  // ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îã¨ Ïä§ÌÉÄÏùºÎì§
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  closeButton: {
    padding: 4,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  placeholder: {
    width: 24,
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  detailCard: {
    borderRadius: 12,
    padding: 20,
  },
  detailHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  detailTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  detailInfo: {
    marginBottom: 24,
    gap: 4,
  },
  detailLabel: {
    fontSize: 14,
  },
  detailContent: {
    gap: 20,
  },
  detailSection: {
    marginBottom: 16,
  },
  detailSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  detailSectionContent: {
    fontSize: 14,
    lineHeight: 20,
  },
  detailFeedbackSection: {
    backgroundColor: 'rgba(239, 68, 68, 0.1)',
    borderRadius: 12,
    padding: 16,
    marginTop: 8,
  },
  detailFeedbackHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
    gap: 8,
  },
  detailFeedbackTitle: {
    fontSize: 14,
    fontWeight: '600',
  },
  detailFeedbackContent: {
    paddingLeft: 28,
  },
  detailFeedbackText: {
    fontSize: 14,
    lineHeight: 20,
  },
  detailApprovalButtons: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 24,
  },
  detailApprovalButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 14,
    borderRadius: 8,
    gap: 8,
  },
  detailApprovalButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
