import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import { useTheme } from '../../store/themeStore';
import { authService } from '../../services/AuthService';
import CustomScrollView from '../../components/CustomScrollView';

const createStyles = (colors: any) => StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollView: {
    flexGrow: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: colors.surface,
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 8,
  },
  backButton: {
    backgroundColor: colors.surfaceVariant,
    borderRadius: 20,
    padding: 8,
  },
  headerTitle: {
    flex: 1,
    fontSize: 20,
    fontWeight: '800',
    color: colors.primary,
    textAlign: 'center',
    marginRight: 40,
  },
  content: {
    padding: 20,
  },
  formContainer: {
    backgroundColor: colors.surface,
    borderRadius: 24,
    padding: 24,
    marginBottom: 20,
    shadowColor: colors.shadow,
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 8,
  },
  formTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: colors.primary,
    textAlign: 'center',
    marginBottom: 8,
  },
  formSubtitle: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
  },
  // ‚úÖ Ï¥àÎåÄ ÌÜ†ÌÅ∞ ÌëúÏãú Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
  inviteTokenContainer: {
    backgroundColor: colors.primary + '20',
    padding: 16,
    borderRadius: 12,
    marginBottom: 20,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: colors.primary + '40',
  },
  inviteTokenTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: colors.primary,
    marginBottom: 8,
    textAlign: 'center',
  },
  inviteTokenText: {
    fontSize: 12,
    color: colors.primary,
    fontWeight: '600',
    textAlign: 'center',
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.primary,
    marginBottom: 8,
  },
  required: {
    color: colors.error || '#FF6B6B',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.surfaceVariant,
    borderRadius: 16,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  inputFocused: {
    borderColor: colors.primary,
  },
  inputError: {
    borderColor: colors.error || '#FF6B6B',
  },
  inputVerified: {
    borderColor: '#4CAF50',
  },
  inputIcon: {
    paddingLeft: 16,
  },
  input: {
    flex: 1,
    padding: 16,
    fontSize: 16,
    color: '#333',
  },
  emailInputWrapper: {
    flex: 1,
  },
  verifyButton: {
    backgroundColor: colors.primary,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 12,
    marginLeft: 8,
  },
  verifyButtonDisabled: {
    backgroundColor: '#CCC',
  },
  verifyButtonVerified: {
    backgroundColor: '#4CAF50',
  },
  verifyButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  verificationContainer: {
    marginTop: 8,
    padding: 12,
    backgroundColor: colors.surfaceVariant,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: colors.primary,
  },
  verificationInputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  verificationInput: {
    flex: 1,
    padding: 12,
    fontSize: 16,
    color: '#333',
    backgroundColor: '#fff',
    borderRadius: 8,
    marginRight: 8,
  },
  verificationButton: {
    backgroundColor: colors.primary,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
  },
  verificationButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  verificationTimer: {
    fontSize: 12,
    color: colors.primary,
    textAlign: 'center',
    marginTop: 8,
  },
  verificationTimerExpired: {
    fontSize: 12,
    color: colors.error || '#FF6B6B',
    textAlign: 'center',
    marginTop: 8,
    fontWeight: '600',
  },
  expiredMessage: {
    backgroundColor: '#FFE6E6',
    borderColor: colors.error || '#FF6B6B',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    marginTop: 8,
  },
  expiredMessageText: {
    fontSize: 12,
    color: colors.error || '#FF6B6B',
    textAlign: 'center',
    fontWeight: '600',
  },
  resendButton: {
    backgroundColor: colors.secondary,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    marginTop: 8,
    alignSelf: 'center',
  },
  resendButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  verificationSuccess: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 8,
  },
  verificationSuccessText: {
    color: '#4CAF50',
    fontSize: 12,
    fontWeight: '600',
    marginLeft: 4,
  },
  errorText: {
    fontSize: 12,
    color: colors.error || '#FF6B6B',
    marginTop: 4,
    marginLeft: 8,
  },
  signupButton: {
    backgroundColor: colors.primary,
    borderRadius: 16,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    marginTop: 8,
    shadowColor: colors.primary,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  signupButtonDisabled: {
    backgroundColor: '#CCC',
    shadowOpacity: 0,
    elevation: 0,
  },
  signupButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
  },
  loginLink: {
    alignItems: 'center',
    marginTop: 16,
  },
  loginLinkText: {
    fontSize: 14,
    color: colors.secondary,
    fontWeight: '500',
  },
  loadingButton: {
    opacity: 0.6,
  },
});

interface FormErrors {
  id?: string;
  password?: string;
  nickname?: string;
  email?: string;
}

export function SignupScreen({ navigation, route }: any) {
  const colors = useTheme();

  // ‚úÖ routeÏóêÏÑú token ÌååÎùºÎØ∏ÌÑ∞ Î∞õÍ∏∞
  const inviteToken = route?.params?.token || null;

  const [formData, setFormData] = useState({
    id: '',
    password: '',
    confirmPassword: '',
    nickname: '',
    email: '',
  });
  const [focusedInput, setFocusedInput] = useState<string | null>(null);
  const [errors, setErrors] = useState<FormErrors>({});
  const [isLoading, setIsLoading] = useState(false);

  // Ïù¥Î©îÏùº Ïù∏Ï¶ù Í¥ÄÎ†® ÏÉÅÌÉú - ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ
  const [emailVerification, setEmailVerification] = useState({
    isVerifying: false,
    isVerified: false,
    verificationCode: '',
    timer: 0,
    canResend: true,
    isExpired: false, // ‚úÖ ÎßåÎ£å ÏÉÅÌÉú Ï∂îÍ∞Ä
  });

  // ÌÉÄÏù¥Î®∏ Ï∞∏Ï°∞ - ‚úÖ useRefÎ°ú ÌÉÄÏù¥Î®∏ Í¥ÄÎ¶¨
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // ‚úÖ Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  // ‚úÖ Ï¥àÎåÄ ÌÜ†ÌÅ∞Ïù¥ ÏûàÏùÑ Îïå UI Î≥ÄÍ≤Ω
  useEffect(() => {
    if (inviteToken) {
      console.log('Ï¥àÎåÄ ÌÜ†ÌÅ∞ Í∞êÏßÄ:', inviteToken);
      // Ï¥àÎåÄÎ∞õÏùÄ ÏÇ¨Ïö©ÏûêÏûÑÏùÑ ÏïåÎ¶¨Îäî Î©îÏãúÏßÄ ÌëúÏãú
      Alert.alert(
        'Ïª§Ìîå Ï¥àÎåÄ üéâ',
        'ÌååÌä∏ÎÑàÍ∞Ä ÎãπÏã†ÏùÑ Ïª§Ìîå Îã§Ïù¥Ïñ¥Î¶¨Ïóê Ï¥àÎåÄÌñàÏäµÎãàÎã§!\nÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏôÑÎ£åÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú Ïª§ÌîåÏù¥ Ïó∞Í≤∞Îê©ÎãàÎã§.',
        [{ text: 'ÌôïÏù∏' }]
      );
    }
  }, [inviteToken]);

  // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìï®ÏàòÎì§
  const validateUsername = (id: string) => {
    if (!id.trim()) return 'ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    if (id.length < 4) return 'ÏïÑÏù¥ÎîîÎäî 4Í∏ÄÏûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
    if (!/^[a-zA-Z0-9_]+$/.test(id)) return 'ÏòÅÎ¨∏, Ïà´Ïûê, Ïñ∏ÎçîÏä§ÏΩîÏñ¥Îßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.';
    return '';
  };

  const validatePassword = (password: string) => {
    if (!password) return 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    if (password.length < 8) return 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 8Í∏ÄÏûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
    return '';
  };

  const validateNickname = (nickname: string) => {
    if (!nickname.trim()) return 'ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    if (nickname.length < 2) return 'ÎãâÎÑ§ÏûÑÏùÄ 2Í∏ÄÏûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
    return '';
  };

  const validateEmail = (email: string) => {
    if (!email.trim()) return 'Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) return 'Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§.';
    return '';
  };

  // ‚úÖ ÌÉÄÏù¥Î®∏ ÏãúÏûë Ìï®Ïàò
  const startTimer = () => {
    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ Ï†ïÎ¶¨
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }

    timerRef.current = setInterval(() => {
      setEmailVerification(prev => {
        if (prev.timer <= 1) {
          clearInterval(timerRef.current!);
          // ‚úÖ ÌÉÄÏù¥Î®∏ ÎßåÎ£å Ïãú Ï≤òÎ¶¨
          return {
            ...prev,
            timer: 0,
            canResend: true,
            isExpired: true, // ÎßåÎ£å ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
            isVerifying: false, // Ïù∏Ï¶ù ÏÉÅÌÉú Ìï¥Ï†ú
            verificationCode: '' // ÏûÖÎ†•Îêú ÏΩîÎìú Ï¥àÍ∏∞Ìôî
          };
        }
        return { ...prev, timer: prev.timer - 1 };
      });
    }, 1000);
  };

  // ‚úÖ Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ° - ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ
  const sendVerificationCode = async () => {
    const emailError = validateEmail(formData.email);
    if (emailError) {
      setErrors(prev => ({ ...prev, email: emailError }));
      return;
    }

    // ÏïÑÏù¥ÎîîÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Ï≤¥ÌÅ¨
    if (!formData.id.trim()) {
      setErrors(prev => ({ ...prev, id: 'ÏïÑÏù¥ÎîîÎ•º Î®ºÏ†Ä ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.' }));
      return;
    }

    setIsLoading(true);
    try {
      console.log('Sending verification code...');
      const response = await authService.verifyEmail(formData.id, formData.email);
      console.log('Verification response:', response);

      if (response.success) {
        // ‚úÖ Ïù∏Ï¶ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Î∞è ÌÉÄÏù¥Î®∏ ÏãúÏûë
        setEmailVerification(prev => ({
          ...prev,
          isVerifying: true,
          isVerified: false,
          isExpired: false, // ÎßåÎ£å ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
          verificationCode: '',
          timer: 300, // 5Î∂Ñ (300Ï¥à)
          canResend: false,
        }));

        Alert.alert('Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ°', `Ïù∏Ï¶ù ÏΩîÎìúÎ•º ${formData.email}Î°ú Î∞úÏÜ°ÌñàÏäµÎãàÎã§.\n5Î∂Ñ ÎÇ¥Ïóê Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.`);

        // ‚úÖ ÌÉÄÏù¥Î®∏ ÏãúÏûë
        startTimer();
      } else {
        Alert.alert('Î∞úÏÜ° Ïã§Ìå®', response.message || 'Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Verification error:', error);
      Alert.alert('Ïò§Î•ò', 'Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ° Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ Ïù∏Ï¶ù ÏΩîÎìú ÌôïÏù∏ - ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ
  const verifyCode = async () => {
    if (!emailVerification.verificationCode.trim()) {
      Alert.alert('ÏïåÎ¶º', 'Ïù∏Ï¶ù ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ‚úÖ ÎßåÎ£åÎêú Í≤ΩÏö∞ Ï≤¥ÌÅ¨
    if (emailVerification.isExpired || emailVerification.timer <= 0) {
      Alert.alert('Ïù∏Ï¶ù ÎßåÎ£å', 'Ïù∏Ï¶ù ÏãúÍ∞ÑÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Ïù∏Ï¶ù ÏΩîÎìúÎ•º Îã§Ïãú Î∞úÏÜ°Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);
    try {
      const response = await authService.confirmEmail(
        formData.email,
        emailVerification.verificationCode
      );

      console.log('verify ', response);
      if (response.data.verified) {
        // ‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
        if (timerRef.current) {
          clearInterval(timerRef.current);
        }

        setEmailVerification(prev => ({
          ...prev,
          isVerified: true,
          isVerifying: false,
          isExpired: false,
          timer: 0,
        }));
        Alert.alert('Ïù∏Ï¶ù ÏôÑÎ£å', 'Ïù¥Î©îÏùº Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! ‚úÖ');
      } else {
        Alert.alert('Ïù∏Ï¶ù Ïã§Ìå®', response.data.message || 'Ïù∏Ï¶ù ÏΩîÎìúÍ∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.');
      }
    } catch (error) {
      Alert.alert('Ïò§Î•ò', 'Ïù∏Ï¶ù ÌôïÏù∏ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  // ‚úÖ Ïû¨Î∞úÏÜ° Ìï®Ïàò Ï∂îÍ∞Ä
  const resendVerificationCode = async () => {
    // Í∏∞Ï°¥ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    setEmailVerification(prev => ({
      ...prev,
      isExpired: false,
      verificationCode: '',
      timer: 0,
      canResend: false,
    }));

    // Ïû¨Î∞úÏÜ°
    await sendVerificationCode();
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // ‚úÖ Ïù¥Î©îÏùºÏù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ Ïù∏Ï¶ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Î∞è ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (field === 'email') {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      setEmailVerification(prev => ({
        ...prev,
        isVerifying: false,
        isVerified: false,
        isExpired: false,
        verificationCode: '',
        timer: 0,
        canResend: true,
      }));
    }

    // Ïã§ÏãúÍ∞Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    let error = '';
    switch (field) {
      case 'id':
        error = validateUsername(value);
        break;
      case 'password':
        error = validatePassword(value);
        break;
      case 'nickname':
        error = validateNickname(value);
        break;
      case 'email':
        error = validateEmail(value);
        break;
    }

    setErrors(prev => ({ ...prev, [field]: error }));
  };

  // ‚úÖ ÌöåÏõêÍ∞ÄÏûÖ Ìï®Ïàò ÏàòÏ†ï - token Ìè¨Ìï®
  const handleSignup = async () => {
    // Ï†ÑÏ≤¥ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    const newErrors: FormErrors = {
      id: validateUsername(formData.id),
      password: validatePassword(formData.password),
      nickname: validateNickname(formData.nickname),
      email: validateEmail(formData.email),
    };

    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
    if (formData.password !== formData.confirmPassword) {
      Alert.alert('ÏïåÎ¶º', 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
      return;
    }

    // Ïù¥Î©îÏùº Ïù∏Ï¶ù ÌôïÏù∏
    if (!emailVerification.isVerified) {
      Alert.alert('ÏïåÎ¶º', 'Ïù¥Î©îÏùº Ïù∏Ï¶ùÏùÑ ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // ÏóêÎü¨Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    const hasErrors = Object.values(newErrors).some(error => error !== '');
    if (hasErrors) {
      setErrors(newErrors);
      Alert.alert('ÏïåÎ¶º', 'ÏûÖÎ†• Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsLoading(true);
    try {
      // ‚úÖ Ï¥àÎåÄ ÌÜ†ÌÅ∞ Ìè¨Ìï®Ìïú ÌöåÏõêÍ∞ÄÏûÖ Îç∞Ïù¥ÌÑ∞
      const signupData = {
        id: formData.id,
        password: formData.password,
        nickname: formData.nickname,
        email: formData.email,
        ...(inviteToken && { token: inviteToken }), // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ Ìè¨Ìï®
      };

      console.log('ÌöåÏõêÍ∞ÄÏûÖ Îç∞Ïù¥ÌÑ∞:', {
        ...signupData,
        password: '[Ïà®ÍπÄ]' // Î°úÍ∑∏ÏóêÏÑú ÎπÑÎ∞ÄÎ≤àÌò∏ Ïà®ÍπÄ
      });

      const response = await authService.signUp(signupData);

      if (response.success) {
        const successMessage = inviteToken
          ? 'ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å! üéâ\nÏª§ÌîåÏù¥ ÏûêÎèôÏúºÎ°ú Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§!\nÎ°úÍ∑∏Ïù∏ÌïòÏó¨ ÌååÌä∏ÎÑàÏôÄ Ìï®Íªò Ï∂îÏñµÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.'
          : 'ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å! üéâ\nÌôòÏòÅÌï©ÎãàÎã§! Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.';

        Alert.alert(
          'Í∞ÄÏûÖ ÏÑ±Í≥µ',
          successMessage,
          [
            { text: 'ÌôïÏù∏', onPress: () => navigation.navigate('Login')}
          ]
        );
      } else {
        Alert.alert('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®', response.message || 'ÌöåÏõêÍ∞ÄÏûÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      Alert.alert('Ïò§Î•ò', 'ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  };

  const isFormValid = () => {
    return formData.id &&
      formData.password &&
      formData.confirmPassword &&
      formData.nickname &&
      formData.email &&
      formData.password === formData.confirmPassword &&
      emailVerification.isVerified &&
      Object.values(errors).every(error => !error);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const styles = createStyles(colors);

  return (
    <SafeAreaView style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.navigate('Login')}
        >
          <Icon name="arrow-back" size={24} color={colors.primary} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {inviteToken ? 'Ïª§Ìîå Ï¥àÎåÄÎ∞õÍ∏∞' : 'ÌöåÏõêÍ∞ÄÏûÖ'}
        </Text>
      </View>

      <KeyboardAvoidingView
        style={styles.keyboardAvoidingView}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0}
      >
        <CustomScrollView
          style={styles.scrollView}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
          contentContainerStyle={{ flexGrow: 1 }}
        >
          <View style={styles.content}>
            {/* ÌöåÏõêÍ∞ÄÏûÖ Ìèº */}
            <View style={styles.formContainer}>
              <Text style={styles.formTitle}>
                {inviteToken ? 'ÌååÌä∏ÎÑàÏôÄ Ìï®Íªò ÏãúÏûëÌïòÍ∏∞' : 'ÏÉà Í≥ÑÏ†ï ÎßåÎì§Í∏∞'}
              </Text>
              <Text style={styles.formSubtitle}>
                {inviteToken
                  ? 'ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏôÑÎ£åÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú Ïª§ÌîåÏù¥ Ïó∞Í≤∞Îê©ÎãàÎã§ üíï'
                  : 'Ïª§Ìîå Îã§Ïù¥Ïñ¥Î¶¨ÏôÄ Ìï®Íªò ÌäπÎ≥ÑÌïú ÏàúÍ∞ÑÎì§ÏùÑ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî üíï'
                }
              </Text>

              {/* ‚úÖ Ï¥àÎåÄ ÌÜ†ÌÅ∞ ÌëúÏãú */}
              {inviteToken && (
                <View style={styles.inviteTokenContainer}>
                  <Icon name="favorite" size={32} color={colors.primary} />
                  <Text style={styles.inviteTokenTitle}>
                    üéâ Ïª§Ìîå Ï¥àÎåÄ ÎßÅÌÅ¨Î°ú Í∞ÄÏûÖÌïòÍ∏∞
                  </Text>
                  <Text style={styles.inviteTokenText}>
                    Ï¥àÎåÄ ÏΩîÎìú: {inviteToken.slice(0, 8)}...
                  </Text>
                </View>
              )}

              {/* ÏïÑÏù¥Îîî ÏûÖÎ†• */}
              <View style={styles.inputContainer}>
                <Text style={styles.label}>
                  ÏïÑÏù¥Îîî <Text style={styles.required}>*</Text>
                </Text>
                <View style={[
                  styles.inputWrapper,
                  focusedInput === 'id' && styles.inputFocused,
                  errors.id && styles.inputError
                ]}>
                  <Icon
                    name="person"
                    size={20}
                    color={focusedInput === 'id' ? colors.primary : '#666'}
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="4Í∏ÄÏûê Ïù¥ÏÉÅÏùò ÏïÑÏù¥Îîî"
                    placeholderTextColor="#B0B0B0"
                    value={formData.id}
                    onChangeText={(text) => handleInputChange('id', text)}
                    onFocus={() => setFocusedInput('id')}
                    onBlur={() => setFocusedInput(null)}
                    autoCapitalize="none"
                    autoCorrect={false}
                    editable={!isLoading}
                    returnKeyType="next"
                    blurOnSubmit={false}
                  />
                </View>
                {errors.id ? <Text style={styles.errorText}>{errors.id}</Text> : null}
              </View>

              {/* ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• */}
              <View style={styles.inputContainer}>
                <Text style={styles.label}>
                  ÎπÑÎ∞ÄÎ≤àÌò∏ <Text style={styles.required}>*</Text>
                </Text>
                <View style={[
                  styles.inputWrapper,
                  focusedInput === 'password' && styles.inputFocused,
                  errors.password && styles.inputError
                ]}>
                  <Icon
                    name="lock"
                    size={20}
                    color={focusedInput === 'password' ? colors.primary : '#666'}
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="8Í∏ÄÏûê Ïù¥ÏÉÅÏùò ÎπÑÎ∞ÄÎ≤àÌò∏"
                    placeholderTextColor="#B0B0B0"
                    value={formData.password}
                    onChangeText={(text) => handleInputChange('password', text)}
                    onFocus={() => setFocusedInput('password')}
                    onBlur={() => setFocusedInput(null)}
                    secureTextEntry
                    autoCapitalize="none"
                    autoCorrect={false}
                    editable={!isLoading}
                    returnKeyType="next"
                    blurOnSubmit={false}
                  />
                </View>
                {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null}
              </View>

              {/* ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏ */}
              <View style={styles.inputContainer}>
                <Text style={styles.label}>
                  ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏ <Text style={styles.required}>*</Text>
                </Text>
                <View style={[
                  styles.inputWrapper,
                  focusedInput === 'confirmPassword' && styles.inputFocused,
                  formData.confirmPassword && formData.password !== formData.confirmPassword && styles.inputError
                ]}>
                  <Icon
                    name="lock-outline"
                    size={20}
                    color={focusedInput === 'confirmPassword' ? colors.primary : '#666'}
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    placeholderTextColor="#B0B0B0"
                    value={formData.confirmPassword}
                    onChangeText={(text) => setFormData(prev => ({ ...prev, confirmPassword: text }))}
                    onFocus={() => setFocusedInput('confirmPassword')}
                    onBlur={() => setFocusedInput(null)}
                    secureTextEntry
                    autoCapitalize="none"
                    autoCorrect={false}
                    editable={!isLoading}
                    returnKeyType="next"
                    blurOnSubmit={false}
                  />
                </View>
                {formData.confirmPassword && formData.password !== formData.confirmPassword ? (
                  <Text style={styles.errorText}>ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.</Text>
                ) : null}
              </View>

              {/* ÎãâÎÑ§ÏûÑ ÏûÖÎ†• */}
              <View style={styles.inputContainer}>
                <Text style={styles.label}>
                  ÎãâÎÑ§ÏûÑ <Text style={styles.required}>*</Text>
                </Text>
                <View style={[
                  styles.inputWrapper,
                  focusedInput === 'nickname' && styles.inputFocused,
                  errors.nickname && styles.inputError
                ]}>
                  <Icon
                    name="face"
                    size={20}
                    color={focusedInput === 'nickname' ? colors.primary : '#666'}
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="ÏÇ¨Ïö©Ìï† ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    placeholderTextColor="#B0B0B0"
                    value={formData.nickname}
                    onChangeText={(text) => handleInputChange('nickname', text)}
                    onFocus={() => setFocusedInput('nickname')}
                    onBlur={() => setFocusedInput(null)}
                    autoCorrect={false}
                    editable={!isLoading}
                    returnKeyType="next"
                    blurOnSubmit={false}
                  />
                </View>
                {errors.nickname ? <Text style={styles.errorText}>{errors.nickname}</Text> : null}
              </View>

              {/* Ïù¥Î©îÏùº ÏûÖÎ†• Î∞è Ïù∏Ï¶ù */}
              <View style={styles.inputContainer}>
                <Text style={styles.label}>
                  Ïù¥Î©îÏùº <Text style={styles.required}>*</Text>
                </Text>
                <View style={[
                  styles.inputWrapper,
                  focusedInput === 'email' && styles.inputFocused,
                  errors.email && styles.inputError,
                  emailVerification.isVerified && styles.inputVerified
                ]}>
                  <Icon
                    name="email"
                    size={20}
                    color={
                      emailVerification.isVerified ? '#4CAF50' :
                        focusedInput === 'email' ? colors.primary : '#666'
                    }
                    style={styles.inputIcon}
                  />
                  <View style={styles.emailInputWrapper}>
                    <TextInput
                      style={styles.input}
                      placeholder="example@email.com"
                      placeholderTextColor="#B0B0B0"
                      value={formData.email}
                      onChangeText={(text) => handleInputChange('email', text)}
                      onFocus={() => setFocusedInput('email')}
                      onBlur={() => setFocusedInput(null)}
                      autoCapitalize="none"
                      autoCorrect={false}
                      keyboardType="email-address"
                      editable={!emailVerification.isVerified && !isLoading}
                      returnKeyType="done"
                      blurOnSubmit={false}
                    />
                  </View>
                  {!emailVerification.isVerified && (
                    <TouchableOpacity
                      style={[
                        styles.verifyButton,
                        isLoading && styles.loadingButton,
                        (!formData.email || errors.email || !emailVerification.canResend) && styles.verifyButtonDisabled
                      ]}
                      onPress={sendVerificationCode}
                      disabled={!formData.email || !!errors.email || !emailVerification.canResend || isLoading}
                    >
                      <Text style={styles.verifyButtonText}>
                        {isLoading ? 'Î∞úÏÜ°Ï§ë...' : emailVerification.isVerifying ? 'Ïû¨Î∞úÏÜ°' : 'Ïù∏Ï¶ù'}
                      </Text>
                    </TouchableOpacity>
                  )}
                  {emailVerification.isVerified && (
                    <View style={styles.verifyButtonVerified}>
                      <Icon name="check" size={16} color="#fff" />
                    </View>
                  )}
                </View>
                {errors.email ? <Text style={styles.errorText}>{errors.email}</Text> : null}

                {/* ‚úÖ Ïù∏Ï¶ù ÏΩîÎìú ÏûÖÎ†• - ÎßåÎ£å Ï≤òÎ¶¨ Ï∂îÍ∞Ä */}
                {emailVerification.isVerifying && !emailVerification.isVerified && !emailVerification.isExpired && (
                  <View style={styles.verificationContainer}>
                    <Text style={[styles.label, { marginBottom: 8 }]}>Ïù∏Ï¶ù ÏΩîÎìú</Text>
                    <View style={styles.verificationInputWrapper}>
                      <TextInput
                        style={styles.verificationInput}
                        placeholder="6ÏûêÎ¶¨ Ïù∏Ï¶ù ÏΩîÎìú"
                        placeholderTextColor="#B0B0B0"
                        value={emailVerification.verificationCode}
                        onChangeText={(text) => setEmailVerification(prev => ({ ...prev, verificationCode: text }))}
                        keyboardType="number-pad"
                        maxLength={6}
                        editable={!isLoading && !emailVerification.isExpired}
                        returnKeyType="done"
                        blurOnSubmit={false}
                      />
                      <TouchableOpacity
                        style={[
                          styles.verificationButton,
                          isLoading && styles.loadingButton
                        ]}
                        onPress={verifyCode}
                        disabled={isLoading || emailVerification.isExpired}
                      >
                        <Text style={styles.verificationButtonText}>
                          {isLoading ? 'ÌôïÏù∏Ï§ë...' : 'ÌôïÏù∏'}
                        </Text>
                      </TouchableOpacity>
                    </View>
                    {emailVerification.timer > 0 ? (
                      <Text style={[
                        styles.verificationTimer,
                        emailVerification.timer <= 60 && { color: colors.error || '#FF6B6B' }
                      ]}>
                        ÎÇ®ÏùÄ ÏãúÍ∞Ñ: {formatTime(emailVerification.timer)}
                        {emailVerification.timer <= 60 && ' ‚è∞'}
                      </Text>
                    ) : null}
                  </View>
                )}

                {/* ‚úÖ ÎßåÎ£å Î©îÏãúÏßÄ Î∞è Ïû¨Î∞úÏÜ° Î≤ÑÌäº */}
                {emailVerification.isExpired && (
                  <View style={styles.expiredMessage}>
                    <Text style={styles.expiredMessageText}>
                      ‚ö†Ô∏è Ïù∏Ï¶ù ÏãúÍ∞ÑÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. (5Î∂Ñ Ï¥àÍ≥º)
                    </Text>
                    <TouchableOpacity
                      style={[
                        styles.resendButton,
                        isLoading && styles.loadingButton
                      ]}
                      onPress={resendVerificationCode}
                      disabled={isLoading}
                    >
                      <Text style={styles.resendButtonText}>
                        {isLoading ? 'Ïû¨Î∞úÏÜ°Ï§ë...' : 'Ïù∏Ï¶ù ÏΩîÎìú Ïû¨Î∞úÏÜ°'}
                      </Text>
                    </TouchableOpacity>
                  </View>
                )}

                {/* Ïù∏Ï¶ù ÏÑ±Í≥µ Î©îÏãúÏßÄ */}
                {emailVerification.isVerified && (
                  <View style={styles.verificationSuccess}>
                    <Icon name="check-circle" size={16} color="#4CAF50" />
                    <Text style={styles.verificationSuccessText}>
                      Ïù¥Î©îÏùº Ïù∏Ï¶ùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!
                    </Text>
                  </View>
                )}
              </View>

              {/* ÌöåÏõêÍ∞ÄÏûÖ Î≤ÑÌäº */}
              <TouchableOpacity
                style={[
                  styles.signupButton,
                  (!isFormValid() || isLoading) && styles.signupButtonDisabled
                ]}
                onPress={handleSignup}
                disabled={!isFormValid() || isLoading}
              >
                <Icon name="person-add" size={20} color="#fff" />
                <Text style={styles.signupButtonText}>
                  {isLoading
                    ? 'Í∞ÄÏûÖ Ï§ë...'
                    : inviteToken
                      ? 'Ïª§Ìîå Ïó∞Í≤∞ÌïòÎ©∞ Í∞ÄÏûÖÌïòÍ∏∞'
                      : 'ÌöåÏõêÍ∞ÄÏûÖ'
                  }
                </Text>
              </TouchableOpacity>

              {/* Î°úÍ∑∏Ïù∏ ÎßÅÌÅ¨ */}
              <TouchableOpacity
                style={styles.loginLink}
                onPress={() => navigation.navigate('Login')}
              >
                <Text style={styles.loginLinkText}>
                  Ïù¥ÎØ∏ Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? Î°úÍ∑∏Ïù∏ÌïòÍ∏∞
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </CustomScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
